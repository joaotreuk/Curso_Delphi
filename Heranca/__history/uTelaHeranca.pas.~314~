unit uTelaHeranca;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Data.DB, Vcl.Grids, Vcl.DBGrids,
  Vcl.StdCtrls, Vcl.Mask, Vcl.ComCtrls, Vcl.ExtCtrls, Vcl.DBCtrls,
  ZAbstractRODataset, ZAbstractDataset, ZDataset, uDTMConexao, uEnum,
  RxToolEdit, RxCurrEdit, ZConnection;

type
  TfrmTelaHeranca = class(TForm)
    pnlRodape: TPanel;
    btnNovo: TButton;
    btnAlterar: TButton;
    btnCancelar: TButton;
    btnSalvar: TButton;
    btnDeletar: TButton;
    btnFechar: TButton;
    dbnNavegador: TDBNavigator;
    pgcPrincipal: TPageControl;
    tabListagem: TTabSheet;
    pnlListagem: TPanel;
    btnPesquisar: TButton;
    mskPesquisar: TMaskEdit;
    grdListagem: TDBGrid;
    tabManutencao: TTabSheet;
    qryListagem: TZQuery;
    dtsListagem: TDataSource;
    lblPesquisar: TLabel;
    procedure FormCreate(Sender: TObject);
    procedure btnFecharClick(Sender: TObject);
    procedure btnNovoClick(Sender: TObject);
    procedure btnCancelarClick(Sender: TObject);
    procedure btnSalvarClick(Sender: TObject);
    procedure btnAlterarClick(Sender: TObject);
    procedure FormShow(Sender: TObject);
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure grdListagemTitleClick(Column: TColumn);
    procedure mskPesquisarChange(Sender: TObject);
    procedure btnDeletarClick(Sender: TObject);
    procedure grdListagemDblClick(Sender: TObject);
    procedure grdListagemKeyDown(Sender: TObject; var Key: Word;
      Shift: TShiftState);
  private
    procedure ControlarBotoes(btnNovo, btnAlterar, btnCancelar, btnSalvar, btnDeletar: TButton;
      Navegador: TDBNavigator; pgcPrincipal: TPageControl; Flag: Boolean);
    procedure ControlarIndiceTab(pgcPrincipal: TPageControl; Indice: Integer);
    function RetornarCampoTraduzido(Campo: string): string;
    procedure ExibirLabelIndice(Campo: string; aLabel: TLabel);
    function ExisteCamposObrigatorios: Boolean;
    procedure DesabilitarEditPK;
    procedure LimparCampos;
  public
    IndiceAtual: string;
    EstadoDoCadastro: TEstadoDoCadastro;
    function Excluir:Boolean; virtual;
    function Salvar(EstadoDoCadastro:TEstadoDoCadastro):Boolean; virtual;
    procedure BloquearCTRL_DEL_DBGrid(var Key: Word; Shift: TShiftState);
    class function TenhoAcesso(idUsuario: Integer; chave: String; conexao: TZConnection): Boolean; static;
  end;

var
  frmTelaHeranca: TfrmTelaHeranca;

implementation

{$R *.dfm}

uses uPrincipal;

{$Region 'Observações'}{

  Tags:
    1 = Campo obrigatório;
    2 = Chave primária

}{$EndRegion}

{$Region 'Funções e Procedimentos'}

procedure TfrmTelaHeranca.ControlarIndiceTab(pgcPrincipal: TPageControl; Indice: Integer);
begin
  if pgcPrincipal.Pages[Indice].TabVisible then
    pgcPrincipal.TabIndex := 0;
end;

procedure TfrmTelaHeranca.ControlarBotoes(btnNovo, btnAlterar, btnCancelar, btnSalvar,
  btnDeletar: TButton; Navegador: TDBNavigator; pgcPrincipal: TPageControl; Flag: Boolean);
begin
  btnNovo.Enabled := Flag;
  btnDeletar.Enabled := Flag;
  btnAlterar.Enabled := Flag;
  Navegador.Enabled := Flag;
  pgcPrincipal.Pages[0].TabVisible := Flag;
  btnCancelar.Enabled := not(Flag);
  btnSalvar.Enabled := not(Flag);
end;

function TfrmTelaHeranca.RetornarCampoTraduzido(Campo: string): string;
var indice: Integer;
begin
  for indice := 0 to qryListagem.Fields.Count - 1 do
  begin
    if LowerCase(qryListagem.Fields[indice].FieldName) = LowerCase(Campo) then
    begin
      Result := qryListagem.Fields[indice].DisplayLabel + ':';
      Break;
    end;
  end;
end;

procedure TfrmTelaHeranca.ExibirLabelIndice(Campo: string; aLabel: TLabel);
begin
  aLabel.Caption := RetornarCampoTraduzido(Campo);
end;

function TfrmTelaHeranca.ExisteCamposObrigatorios():Boolean;
Var indice: Integer;
begin
  Result := False;

  for indice := 0 to ComponentCount - 1 do
  begin
    if Components[indice] is TLabeledEdit then
    begin
      if (TLabeledEdit(Components[indice]).Tag = 1) and (TLabeledEdit(Components[indice]).Text = EmptyStr) then
      begin
        MessageDlg(
          'O campo ' + TLabeledEdit(Components[indice]).EditLabel.Caption + ' é obrigatório!',
          mtInformation,
          [mbOK],
          0
        );

        TLabeledEdit(Components[indice]).SetFocus;
        Result := True;
        Break;
      end;
    end;
  end;
end;

procedure TfrmTelaHeranca.DesabilitarEditPK();
Var indice: Integer;
begin
  for indice := 0 to ComponentCount - 1 do
  begin
    if Components[indice] is TLabeledEdit then
    begin
      if TLabeledEdit(Components[indice]).Tag = 2 then
      begin
        TLabeledEdit(Components[indice]).Enabled := False;
        Break;
      end;
    end;
  end;
end;

procedure TfrmTelaHeranca.LimparCampos();
Var indice: Integer;
begin
  for indice := 0 to ComponentCount - 1 do
  begin
    if Components[indice] is TLabeledEdit then
      TLabeledEdit(Components[indice]).Text := EmptyStr
    else if Components[indice] is TEdit then
      TEdit(Components[indice]).Text := ''
    else if Components[indice] is TMemo then
      TMemo(Components[indice]).Text := ''
    else if Components[indice] is TDBLookupComboBox then
      TDBLookupComboBox(Components[indice]).KeyValue := Null
    else if Components[indice] is TCurrencyEdit then
      TCurrencyEdit(Components[indice]).Value := 0
    else if Components[indice] is TDateEdit then
      TDateEdit(Components[indice]).Date := 0
    else if Components[indice] is TMaskEdit then
      TMaskEdit(Components[indice]).Text := '';
  end;
end;

procedure TfrmTelaHeranca.BloquearCTRL_DEL_DBGrid(var Key: Word; Shift: TShiftState);
begin
  if (Shift = [ssCtrl]) and (Key = 46) then Key := 0;
end;

{$EndRegion}

{$Region 'Métodos Virtuais'}

function TfrmTelaHeranca.Salvar(EstadoDoCadastro:TEstadoDoCadastro): Boolean;
begin
  if EstadoDoCadastro = ecInserir then
    ShowMessage('Inserir')
  else if EstadoDoCadastro = ecAlterar then
    ShowMessage('Alterar');

  Result := True;
end;

class function TfrmTelaHeranca.TenhoAcesso(idUsuario: Integer; chave: String;
  conexao: TZConnection): Boolean;
var query: TZQuery;
begin
  try
    Result := True;
    query := TZQuery.Create(nil);
    query.Connection := dtmConexao.zcConexao;
    query.SQL.Clear;

    query.SQL.Add(
      'SELECT ativo FROM usuariosAcaoAcesso WITH (NOLOCK)' +
      'WHERE usuarioId = :IDUsuario ' +
      'AND acaoAcessoId = (' +
      '	SELECT TOP 1 acaoAcessoId FROM acaoAcesso WITH (NOLOCK)' +
      '	WHERE chave = :Chave' +
      ')'
    );

    query.ParamByName('IDUsuario').AsInteger := idUsuario;
    query.ParamByName('Chave').AsString := chave;
    query.Open;

    if query.IsEmpty then Result := False;
  finally
    if Assigned(query) then FreeAndNil(query);
  end;
end;

function TfrmTelaHeranca.Excluir: Boolean;
begin
  ShowMessage('Deletado!');
  Result := True;
end;

{$EndRegion}

procedure TfrmTelaHeranca.btnAlterarClick(Sender: TObject);
begin
  ControlarBotoes(
    btnNovo, btnAlterar, btnCancelar, btnSalvar, btnDeletar, dbnNavegador, pgcPrincipal, false
  );

  EstadoDoCadastro := ecAlterar;
end;

procedure TfrmTelaHeranca.btnCancelarClick(Sender: TObject);
begin
  ControlarBotoes(
    btnNovo, btnAlterar, btnCancelar, btnSalvar, btnDeletar, dbnNavegador, pgcPrincipal, true
  );

  ControlarIndiceTab(pgcPrincipal, 0);
end;

procedure TfrmTelaHeranca.btnDeletarClick(Sender: TObject);
begin
  if Excluir then
    qryListagem.Refresh;
end;

procedure TfrmTelaHeranca.btnFecharClick(Sender: TObject);
begin
  Close;
end;

procedure TfrmTelaHeranca.btnNovoClick(Sender: TObject);
begin
  if not TenhoAcesso(
    oUsuarioLogado.codigo,
    Self.Name + '_' + TButton(Sender).Name,
    dtmConexao.zcConexao
  ) then
  begin
    MessageDlg('Usuário: ' + oUsuarioLogado.nome + ', não possui permissão de acesso!');
    Abort;
  end;

  LimparCampos;

  ControlarBotoes(
    btnNovo, btnAlterar, btnCancelar, btnSalvar, btnDeletar, dbnNavegador, pgcPrincipal, false
  );

  EstadoDoCadastro := ecInserir;
end;

procedure TfrmTelaHeranca.btnSalvarClick(Sender: TObject);
begin
  if ExisteCamposObrigatorios then
    Abort;

  if Salvar(EstadoDoCadastro) then
  begin
    ControlarBotoes(
      btnNovo, btnAlterar, btnCancelar, btnSalvar, btnDeletar, dbnNavegador, pgcPrincipal, true
    );

    ControlarIndiceTab(pgcPrincipal, 0);

    qryListagem.Refresh;
  end;
end;

procedure TfrmTelaHeranca.FormClose(Sender: TObject; var Action: TCloseAction);
begin
  qryListagem.Close;
end;

procedure TfrmTelaHeranca.FormCreate(Sender: TObject);
begin
  qryListagem.Connection := uDTMConexao.dtmConexao.zcConexao;
  dtsListagem.DataSet := qryListagem;
  grdListagem.DataSource := dtsListagem;

  grdListagem.Options := [
    dgTitles, dgIndicator, dgColumnResize, dgColLines, dgRowLines, dgTabs, dgRowSelect,
    dgAlwaysShowSelection, dgCancelOnExit, dgTitleClick, dgTitleHotTrack
  ];
end;

procedure TfrmTelaHeranca.FormShow(Sender: TObject);
begin
  if qryListagem.SQL.Text <> EmptyStr then begin
    qryListagem.IndexFieldNames := IndiceAtual;
    ExibirLabelIndice(IndiceAtual, lblPesquisar);

    qryListagem.Open;
  end;

  ControlarIndiceTab(pgcPrincipal, 0);

  ControlarBotoes(
    btnNovo, btnAlterar, btnCancelar, btnSalvar, btnDeletar, dbnNavegador, pgcPrincipal, true
  );

  DesabilitarEditPK;
end;

procedure TfrmTelaHeranca.grdListagemDblClick(Sender: TObject);
begin
  btnAlterar.Click;
end;

procedure TfrmTelaHeranca.grdListagemKeyDown(Sender: TObject; var Key: Word;
  Shift: TShiftState);
begin
  BloquearCTRL_DEL_DBGrid(Key, Shift);
end;

procedure TfrmTelaHeranca.grdListagemTitleClick(Column: TColumn);
begin
  IndiceAtual := Column.FieldName;
  qryListagem.IndexFieldNames := IndiceAtual;
  ExibirLabelIndice(IndiceAtual, lblPesquisar);
end;

procedure TfrmTelaHeranca.mskPesquisarChange(Sender: TObject);
begin
  qryListagem.Locate(IndiceAtual, TMaskEdit(Sender).Text, [loPartialKey]);
end;

end.
